{"title":"DIY API with Make and {plumber}","markdown":{"yaml":{"title":"DIY API with Make and {plumber}","date":"2024-01-12","description":"Use Make and {plumber} to create your own API and show live data in Quarto with R and Observable JS","image":"img/card.png","twitter-card":{"image":"img/card.png"},"open-graph":{"image":"img/card.png"},"categories":["r","tidyverse","quarto","observablejs","plumber","api","make","goals"],"resources":["_book/**","img/*"],"doi":"10.59350/pe5s8-e0f47","citation":true},"headingText":"Complete tutorial and code","containsRefs":false,"markdown":"\n\n::: {.callout-important}\n\n<a href=\"_book/\" target=\"_blank\" rel=\"noopener\">See the full tutorial here.</a> You can also see [the tutorial's code here](https://github.com/andrewheiss/diy-api-plumber-quarto-ojs) and the [code for the final API here](https://github.com/andrewheiss/basic-plumber-api).\n:::\n\nFor years, I've tracked all sorts of data about myself (and my family) through Google Forms, [Airtable](https://www.airtable.com/), and devices like Fitbits to keep track of all sorts of things: personal goals, progress of research projects, current health status, books read, and so on.\n\nIt's nice to have all this data, but it's hard to use it all immediately. I often look at it at the end of the year, or every few months, or whatever, but having an instant snapshot is helpful too. That's why people invented data dashboards, after all.\n\nI like R a lot, and R has the ability to make dashboards, like with [{flexdashboard}](https://pkgs.rstudio.com/flexdashboard/) and [Shiny](https://shiny.posit.co/). I've made several dashboards for tracking things like health and reading and research—[I even have a blog post about making one with {flexdashboard}](https://www.andrewheiss.com/blog/2020/01/01/flexdashboard-dynamic-data/)!\n\nBut I've always run into issues with getting live data. With {flexdashboard}, you can make it grab the most recent version of the data you're interested in *when you knit the document*, but then to update the graphs and tables in the document, you have to re-knit it. With Shiny, there are ways to dynamically grab the latest data, but then you have to run a whole Shiny server, and that's hard and costs money *and* it's slow—it can sometimes take a few minutes to reanimate a hibernating Shiny app!\n\nHowever, nowadays it's possible to use [Observable JS](https://quarto.org/docs/computations/ojs.html) chunks in Quarto that automatically grab live data from the internet and display it, like this:\n\n```{ojs}\n//| echo: fenced\n//| code-fold: true\n//| code-summary: \"Show the OJS code\"\nd3 = require('d3')\n\nviewof year_to_show = Inputs.radio([\"2023\", \"2024\"], {value: \"2023\", label: \"Year to show\"})\n\nbooks = await d3.json(\n  \"https://api.andrewheiss.com/books_simple?year=\" + year_to_show\n)\n\nbook_noun = (books.count[0] === 1 ? \" book read\" : \" books read\")\n\nPlot.plot({\n  title: books.count[0] + book_noun + \" in \" + year_to_show,\n  y: {\n    label: \"Books read\",\n    grid: false,\n    percent: false\n  },\n  x: {\n    label: \"Month\",\n    domain: books.monthly_count.map(d => d.read_month_fct),\n  },\n  marks: [\n    Plot.ruleY([0]),\n    Plot.axisX({label: null, ticks: null}),\n    Plot.axisY({label: null, ticks: null}),\n\n    Plot.barY(books.monthly_count, {\n      x: \"read_month_fct\", \n      y: \"count\", \n      fill: \"#f3752f\",\n      tip: {\n        format: {\n          x: true,\n          y: true\n        }\n      }\n    })\n  ]\n})\n```\n\nAnd now that [Quarto supports dashboards](https://quarto.org/docs/dashboards/), you can create entire Shiny-like dashboards that can load and display data without needing a Shiny server. [Like this one!](_book/dashboard/)\n\nThe trickiest part of all this, though, is getting data from all around the internet (Google Sheets, Airtable databases, RSS feeds, Fitbit, etc.) into an easily accessible, clean, and usable format that you can feed into things like Observable plots or R.\n\nFortunately there's a good (and really neat!) solution for this! You can use the [{plumber} R package](https://www.rplumber.io/) to create your own API that you can use to grab and clean data from all around the internet. And to simplify life, you can use other services like [Make.com](https://www.make.com/en) to deal with the hard work of regularly checking in on different parts of the internet (checking RSS feeds, reading Google/Airtable data, logging into services like Fitbit).\n\nIn the end, you can have a server like `api.yourname.com` and access JSON, CSV, or .rds data like `api.yourname.com/books?start_date=2024-01-01`. You can then use that in an R file, in a Python script, or in a Quarto document with Observable JS. It's magical!\n\nTo explain and illustrate this whole process, I started out writing a blog post, but it got long and complex, so I wrote a literal book instead. \n\n<a href=\"_book/\" target=\"_blank\" rel=\"noopener\">Access it here for a full tutorial.</a>\n\n::: {.column-page-inset}\n![Overview of the process](_book/assets/out/overview.svg)\n:::\n","srcMarkdownNoYaml":"\n\n::: {.callout-important}\n## Complete tutorial and code\n\n<a href=\"_book/\" target=\"_blank\" rel=\"noopener\">See the full tutorial here.</a> You can also see [the tutorial's code here](https://github.com/andrewheiss/diy-api-plumber-quarto-ojs) and the [code for the final API here](https://github.com/andrewheiss/basic-plumber-api).\n:::\n\nFor years, I've tracked all sorts of data about myself (and my family) through Google Forms, [Airtable](https://www.airtable.com/), and devices like Fitbits to keep track of all sorts of things: personal goals, progress of research projects, current health status, books read, and so on.\n\nIt's nice to have all this data, but it's hard to use it all immediately. I often look at it at the end of the year, or every few months, or whatever, but having an instant snapshot is helpful too. That's why people invented data dashboards, after all.\n\nI like R a lot, and R has the ability to make dashboards, like with [{flexdashboard}](https://pkgs.rstudio.com/flexdashboard/) and [Shiny](https://shiny.posit.co/). I've made several dashboards for tracking things like health and reading and research—[I even have a blog post about making one with {flexdashboard}](https://www.andrewheiss.com/blog/2020/01/01/flexdashboard-dynamic-data/)!\n\nBut I've always run into issues with getting live data. With {flexdashboard}, you can make it grab the most recent version of the data you're interested in *when you knit the document*, but then to update the graphs and tables in the document, you have to re-knit it. With Shiny, there are ways to dynamically grab the latest data, but then you have to run a whole Shiny server, and that's hard and costs money *and* it's slow—it can sometimes take a few minutes to reanimate a hibernating Shiny app!\n\nHowever, nowadays it's possible to use [Observable JS](https://quarto.org/docs/computations/ojs.html) chunks in Quarto that automatically grab live data from the internet and display it, like this:\n\n```{ojs}\n//| echo: fenced\n//| code-fold: true\n//| code-summary: \"Show the OJS code\"\nd3 = require('d3')\n\nviewof year_to_show = Inputs.radio([\"2023\", \"2024\"], {value: \"2023\", label: \"Year to show\"})\n\nbooks = await d3.json(\n  \"https://api.andrewheiss.com/books_simple?year=\" + year_to_show\n)\n\nbook_noun = (books.count[0] === 1 ? \" book read\" : \" books read\")\n\nPlot.plot({\n  title: books.count[0] + book_noun + \" in \" + year_to_show,\n  y: {\n    label: \"Books read\",\n    grid: false,\n    percent: false\n  },\n  x: {\n    label: \"Month\",\n    domain: books.monthly_count.map(d => d.read_month_fct),\n  },\n  marks: [\n    Plot.ruleY([0]),\n    Plot.axisX({label: null, ticks: null}),\n    Plot.axisY({label: null, ticks: null}),\n\n    Plot.barY(books.monthly_count, {\n      x: \"read_month_fct\", \n      y: \"count\", \n      fill: \"#f3752f\",\n      tip: {\n        format: {\n          x: true,\n          y: true\n        }\n      }\n    })\n  ]\n})\n```\n\nAnd now that [Quarto supports dashboards](https://quarto.org/docs/dashboards/), you can create entire Shiny-like dashboards that can load and display data without needing a Shiny server. [Like this one!](_book/dashboard/)\n\nThe trickiest part of all this, though, is getting data from all around the internet (Google Sheets, Airtable databases, RSS feeds, Fitbit, etc.) into an easily accessible, clean, and usable format that you can feed into things like Observable plots or R.\n\nFortunately there's a good (and really neat!) solution for this! You can use the [{plumber} R package](https://www.rplumber.io/) to create your own API that you can use to grab and clean data from all around the internet. And to simplify life, you can use other services like [Make.com](https://www.make.com/en) to deal with the hard work of regularly checking in on different parts of the internet (checking RSS feeds, reading Google/Airtable data, logging into services like Fitbit).\n\nIn the end, you can have a server like `api.yourname.com` and access JSON, CSV, or .rds data like `api.yourname.com/books?start_date=2024-01-01`. You can then use that in an R file, in a Python script, or in a Quarto document with Observable JS. It's magical!\n\nTo explain and illustrate this whole process, I started out writing a blog post, but it got long and complex, so I wrote a literal book instead. \n\n<a href=\"_book/\" target=\"_blank\" rel=\"noopener\">Access it here for a full tutorial.</a>\n\n::: {.column-page-inset}\n![Overview of the process](_book/assets/out/overview.svg)\n:::\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"message":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":true,"code-line-numbers":false,"code-tools":true,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"reference-location":"margin","highlight-style":"monokai","output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.40","bibliography":["../../../../../files/bib/references.bib"],"csl":"../../../../../files/bib/chicago-author-date.csl","pagetitle":"{{< meta title >}} | Brenda Durand Ordiales","author-meta":"Brenda Durand Ordiales","_quarto-vars":{"orcid":"0000-0002-3948-3914","github-url":"https://github.com/andrewheiss/ath-quarto","pgp":{"key":"../../../../../pgp_ath.asc.txt","fingerprint":"4AA2 FA83 A8B2 05A4 E30F<br /> 610D 1382 6216 9178 36AB"},"years":"2007–2024"},"theme":["../../../../../html/ath.scss"],"grid":{"body-width":"900px"},"anchor-sections":true,"fig-cap-location":"margin","footnotes-hover":true,"date-format":"dddd, MMMM D, YYYY","title-block-banner":"#170C3A","toc-title":"Contents","toc-location":"left","author":[{"name":"Andrew Heiss","url":"https://www.andrewheiss.com/","orcid":"0000-0002-3948-3914"}],"comments":{"giscus":{"repo":"andrewheiss/ath-quarto","category":"Blog comments","category-id":"DIC_kwDOIg6EJc4CSz92","mapping":"pathname"}},"quarto-template-params":{"banner-header-class":"blog-post"},"title":"DIY API with Make and {plumber}","date":"2024-01-12","description":"Use Make and {plumber} to create your own API and show live data in Quarto with R and Observable JS","image":"img/card.png","twitter-card":{"image":"img/card.png"},"open-graph":{"image":"img/card.png"},"categories":["r","tidyverse","quarto","observablejs","plumber","api","make","goals"],"resources":["_book/**","img/*"],"doi":"10.59350/pe5s8-e0f47","citation":true},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}